# custom theme
# https://github.com/jimeh/tmux-themepack
source-file "${HOME}/.tmux-themepack/powerline/block/cyan.tmuxtheme"

# use C-a, since it's on the home row and easier to hit than C-b
# set-option -g prefix C-a
# unbind-key C-b
# bind-key C-a send-prefix

# send command to nested tmux with C-a a
# bind-key a send-prefix

# hidden status bar
set -g status off

# start index 1
set -g base-index 1

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color

set-window-option -g display-panes-time 1500

# Easy config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# vi copy mode
bind-key [ copy-mode
bind-key ] paste-buffer
set-window-option -g mode-keys vi
# set "v" starts a selection and "y" finishes 
# Go to iTerm2 > Preferences > “General” tab, and in the “Selection” section, check the box which says “Applications in terminal may access clipboard” if it isn’t checked.
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi V send -X rectangle-toggle

# Ring the bell if any background window rang a bell
set -g bell-action any

# scrollback size
set -g history-limit 100000

# set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
setw -g pane-base-index 1

# pass through xterm keys
set -g xterm-keys on

##### Window management / navigation
# move between windows
# bind-key C-h previous-window
# bind-key C-l next-window

##### Pane management / navigation

# resize
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key H resize-pane -L 5
bind-key L resize-pane -R 5
bind-key Q resize-pane -Z
bind -n C-Down resize-pane -D 2
bind -n C-Up resize-pane -U 2
bind -n C-Left resize-pane -L 2
bind -n C-Right resize-pane -R 2

# Selects the next pane in numerical order
bind-key Tab select-pane -t :.+

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Enable mouse mode
# Mouse mode is on by default.
# <prefix> M -- to turn it off
# <prefix> m -- to turn it on
#
# As of tmux 2.1, a backward-incompatible change was introduced.
# mode-mouse and mouse-* no longer exist, replaced by simply
# mouse <on|off>. Which is great, and easier, but unfortunately I use
# tmux on systems which I don't foresee going to 2.1+ anytime soon.
# So, time to test versions... this is kind of cheap and hacky, and it
# won't work for 2.2 and beyond, but will work for now. I tried to make
# this more generalized but have not been successful so far.

# if-shell '[[ $(echo "$(tmux -V | cut -d" " -f2) >= 2.1" | bc) -eq 1 ]]' \
#     'set -g mouse on; bind m set -g mouse on \; display "Mouse ON"; bind M set -g mouse off \; display "Mouse OFF"' \
#     'set -g mode-mouse on; set -g mouse-resize-pane on; set -g mouse-select-pane on; set -g mouse-select-window on; bind m set -g mode-mouse on \; set -g mouse-resize-pane on \; set -g mouse-select-pane on \; set -g mouse-select-window on \; display "Mouse ON"; bind M set -g mode-mouse off \; set -g mouse-resize-pane off \; set -g mouse-select-pane off \; set -g mouse-select-window off \; display "Mouse OFF"'

# if-shell '[[ $(echo "$(tmux -V | cut -d" " -f2) >= 2.1" | bc) -eq 1 ]]' \
#     'set -g mouse on; bind m set -g mouse on \; display "Mouse ON"; bind M set -g mouse off \; display "Mouse OFF"' \
#     'set-option -g mouse on; bind m set-option -g mouse on \; display "Mouse ON"; bind M set-option -g mouse off \; display "Mouse OFF"'

# don't rename windows automatically
set-option -g allow-rename off

# better neo-vim
set-option -sg escape-time 10
set-option -g focus-events on
# tmux-256color for macOS https://gist.github.com/ssh352/785395faad3163b2e0de32649f7ed45c
set-option default-terminal "tmux-256color"
set-option -a terminal-overrides ",*256col*:RGB"
